// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
  role_id,
  first_name,
  middle_name,
  last_name,
  dob,
  country_code,
  phone,
  email,
  salt,
  password,
  status_id,
  create_user
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12
)
RETURNING id, unique_id, role_id, first_name, middle_name, last_name, dob, country_code, phone, email, salt, password, status_id, create_user, modify_user, created_at, modified_at
`

type CreateCustomerParams struct {
	RoleID      pgtype.Int4 `json:"role_id"`
	FirstName   string      `json:"first_name"`
	MiddleName  pgtype.Text `json:"middle_name"`
	LastName    string      `json:"last_name"`
	Dob         pgtype.Date `json:"dob"`
	CountryCode string      `json:"country_code"`
	Phone       string      `json:"phone"`
	Email       pgtype.Text `json:"email"`
	Salt        pgtype.Text `json:"salt"`
	Password    pgtype.Text `json:"password"`
	StatusID    pgtype.Int4 `json:"status_id"`
	CreateUser  int32       `json:"create_user"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.RoleID,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Dob,
		arg.CountryCode,
		arg.Phone,
		arg.Email,
		arg.Salt,
		arg.Password,
		arg.StatusID,
		arg.CreateUser,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.RoleID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Dob,
		&i.CountryCode,
		&i.Phone,
		&i.Email,
		&i.Salt,
		&i.Password,
		&i.StatusID,
		&i.CreateUser,
		&i.ModifyUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, unique_id, role_id, first_name, middle_name, last_name, dob, country_code, phone, email, salt, password, status_id, create_user, modify_user, created_at, modified_at FROM customers
WHERE id=$1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.RoleID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Dob,
		&i.CountryCode,
		&i.Phone,
		&i.Email,
		&i.Salt,
		&i.Password,
		&i.StatusID,
		&i.CreateUser,
		&i.ModifyUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}

const listCustomers = `-- name: ListCustomers :many
SELECT id, unique_id, role_id, first_name, middle_name, last_name, dob, country_code, phone, email, salt, password, status_id, create_user, modify_user, created_at, modified_at FROM customers
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCustomersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCustomers(ctx context.Context, arg ListCustomersParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listCustomers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Customer{}
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.UniqueID,
			&i.RoleID,
			&i.FirstName,
			&i.MiddleName,
			&i.LastName,
			&i.Dob,
			&i.CountryCode,
			&i.Phone,
			&i.Email,
			&i.Salt,
			&i.Password,
			&i.StatusID,
			&i.CreateUser,
			&i.ModifyUser,
			&i.CreatedAt,
			&i.ModifiedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
set password = $1
WHERE id = $2
RETURNING id, unique_id, role_id, first_name, middle_name, last_name, dob, country_code, phone, email, salt, password, status_id, create_user, modify_user, created_at, modified_at
`

type UpdateCustomerParams struct {
	Password pgtype.Text `json:"password"`
	ID       int64       `json:"id"`
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer, arg.Password, arg.ID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.UniqueID,
		&i.RoleID,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Dob,
		&i.CountryCode,
		&i.Phone,
		&i.Email,
		&i.Salt,
		&i.Password,
		&i.StatusID,
		&i.CreateUser,
		&i.ModifyUser,
		&i.CreatedAt,
		&i.ModifiedAt,
	)
	return i, err
}
