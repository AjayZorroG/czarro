// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (
  role_id,
  first_name,
  last_name,
  dob,
  mobile,
  email,
  password,
  status
) VALUES (
  $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, role_id, first_name, last_name, dob, mobile, email, password, status, created_at
`

type CreateCustomerParams struct {
	RoleID    int32
	FirstName string
	LastName  string
	Dob       pgtype.Date
	Mobile    string
	Email     string
	Password  string
	Status    string
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, createCustomer,
		arg.RoleID,
		arg.FirstName,
		arg.LastName,
		arg.Dob,
		arg.Mobile,
		arg.Email,
		arg.Password,
		arg.Status,
	)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.Mobile,
		&i.Email,
		&i.Password,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const deleteCustomer = `-- name: DeleteCustomer :exec
DELETE FROM customers
WHERE id = $1
`

func (q *Queries) DeleteCustomer(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteCustomer, id)
	return err
}

const getCustomer = `-- name: GetCustomer :one
SELECT id, role_id, first_name, last_name, dob, mobile, email, password, status, created_at FROM customers
WHERE id=$1 LIMIT 1
`

func (q *Queries) GetCustomer(ctx context.Context, id int64) (Customer, error) {
	row := q.db.QueryRow(ctx, getCustomer, id)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.Mobile,
		&i.Email,
		&i.Password,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const listAuthors = `-- name: ListAuthors :many
SELECT id, role_id, first_name, last_name, dob, mobile, email, password, status, created_at FROM customers
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListAuthorsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListAuthors(ctx context.Context, arg ListAuthorsParams) ([]Customer, error) {
	rows, err := q.db.Query(ctx, listAuthors, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Customer
	for rows.Next() {
		var i Customer
		if err := rows.Scan(
			&i.ID,
			&i.RoleID,
			&i.FirstName,
			&i.LastName,
			&i.Dob,
			&i.Mobile,
			&i.Email,
			&i.Password,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCustomer = `-- name: UpdateCustomer :one
UPDATE customers
set password = $1
WHERE id = $2
RETURNING id, role_id, first_name, last_name, dob, mobile, email, password, status, created_at
`

type UpdateCustomerParams struct {
	Password string
	ID       int64
}

func (q *Queries) UpdateCustomer(ctx context.Context, arg UpdateCustomerParams) (Customer, error) {
	row := q.db.QueryRow(ctx, updateCustomer, arg.Password, arg.ID)
	var i Customer
	err := row.Scan(
		&i.ID,
		&i.RoleID,
		&i.FirstName,
		&i.LastName,
		&i.Dob,
		&i.Mobile,
		&i.Email,
		&i.Password,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}
